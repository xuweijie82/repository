plugins {
	id 'org.springframework.boot' version '2.4.3'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id "com.jfrog.artifactory" version "4.17.2"
	id 'maven-publish'
	id 'com.google.cloud.tools.jib' version '2.8.0'
	id 'org.sonarqube' version '3.1'
	id 'jacoco'
	id 'com.github.johnrengelman.shadow' version '7.1.2'		

}

group = 'com.lib.util.engine.tool'
version = project.findProperty('buildVersion') ?:'xxx'
sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

repositories {
    maven { 
        url 'xxx'
        credentials {
            username 'xxx'
            password 'xxx'
        }
    }    
}

bootJar {
    enabled=false
}

jar {
    enabled=true
}

jib {
    from.image = 'openjdk:17-alpine'  // Specify a Java 17-compatible base image
}

artifactory {
    contextUrl = "xxx"
    publish {
        repository {
            repoKey = 'gradle-local'
            username = "xxx"
            password = "xxx"
        }
        defaults {
            publications('mavenJava')
        }
    }
}


dependencies {

	implementation ('org.springframework.boot:spring-boot-starter-aop:2.3.3.RELEASE')
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.apache.commons:commons-lang3'
	
	implementation 'com.github.javaparser:javaparser-symbol-solver-core:3.25.8'
	implementation 'com.github.javaparser:javaparser-core:3.25.8'
	implementation 'com.github.javaparser:javaparser-core-serialization:3.25.8'
	
	compileOnly "org.projectlombok:lombok:1.18.20"
	annotationProcessor "org.projectlombok:lombok:1.18.20"
}

test {
    useJUnitPlatform()
    afterTest { desc, result ->
        logger.quiet "Executing ${desc.name}, result: ${result.resultType}"
    }
    finalizedBy jacocoTestReport
    testLogging {
        exceptionFormat = 'full'
    }
}


jacocoTestReport {
    dependsOn test
    afterEvaluate {
        classDirectories.from = files(classDirectories.files.collect {
            fileTree(
                    dir: it,
                    exclude: [
                            "com/lib/util/parsing/tool/**"
                    ])
        })
    }
    reports {
        xml.enabled true
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
}

shadowJar {
    manifest {
        attributes 'Main-Class': 'com.lib.util.parsing.tool.UnusedSolverMethod'
    }
    archiveClassifier.set('')
}

publishing {
	publications {
        shadowPub(MavenPublication) {
            artifact shadowJar
        }
    }
}

task version(type: VersionTask)
class VersionTask extends DefaultTask {
    @TaskAction
    def version() {
        println project.version
    }
}

task projectName(type: ProjectNameTask)
class ProjectNameTask extends DefaultTask {
    @TaskAction
    def projectName() {
        println project.name
    }
}


test.finalizedBy jacocoTestReport
tasks["sonarqube"].dependsOn test
tasks.jar.dependsOn tasks.shadowJar